<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<!-- Activation des annotations d'injection de dependance @Value @Autowired 
		(@Resource @Inject en java, eq. de @Autowired) -->
	<context:annotation-config />


	<!-- Activation des annotations de la detection automatique des composants 
		@Commponent, @repository, @service @Controller -->
	<context:component-scan
		base-package="fr.adaming"></context:component-scan>

	<!-- Specifier le chemin du fichier db.properties -->
	<context:property-placeholder
		location="classpath*:db.properties" />

	<!-- Declaration du bean datasource -->
	<bean id="datasourceBean"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<!-- Injection par modificateurs (via setters) des pprops de DriverManagerDataSourceq -->
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.mdp}"></property>
	</bean>


	<!-- Definition du bean SessionFactory -->
	<bean id="sessionFactoryBean"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- Injecter le collaborateur DataSourceBean via les setters -->
		<property name="dataSource" ref="datasourceBean" />

		<!-- Specifier le package des classes persistentes = annotées par @entity -->
		<property name="packagesToScan" value="fr.adaming.entities"></property>

		<!-- INjecter des valeurs aux proprietes de Hibernate -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hb.dialect}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hb.strategy}</prop>
				<prop key="hibernate.show_sql">${hb.sql}</prop>
			</props>
		</property>
	</bean>

	<!-- Declaration du bean TransactionManager -->
	<bean id="transactionManagerBean"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<!-- Injection de la sessionFactoryBean -->
		<property name="sessionFactory" ref="sessionFactoryBean"></property>
	</bean>


	<!-- Activation de l'annotation @Transactionnal pour la gestion des transactions 
		Hibernate -->
	<tx:annotation-driven
		transaction-manager="transactionManagerBean" />
	<!-- Partie 1: partie autorisation -->
	<security:http>
		<!-- Spécifie les URLS à sécuriser (pattern) et les autorisations acceptées 
			pour y acceder (acces) -->
		<security:intercept-url pattern="/admin/**"
			access="ROLE_ADMIN" />
		<security:intercept-url pattern="/user/**"
			access="ROLE_CLIENT" />
		<!-- Declaration de notre formulaire -->
		<security:form-login login-page="/login"
			authentication-failure-url="/echec" login-processing-url="/connexion" />
		<!-- Cette balise permet d'afficher une page perso lorsque lacces est refusé -->
		<security:access-denied-handler
			error-page="/denied" />
		<!-- Cette balise permet de fermer la session et donc de se deconnecter -->
		<security:logout logout-success-url="/logout"
			delete-cookies="j_username, j_password" logout-url="/deconnexion" />

	</security:http>
	<!-- Partie 2: partie authentification -->
	<security:authentication-manager>
		<security:authentication-provider>
			<security:jdbc-user-service
				data-source-ref="datasourceBean"
				users-by-username-query="SELECT login, mdp, active FROM admins WHERE login=?"
				authorities-by-username-query="SELECT a.login, r.name FROM admins a, roles r WHERE a.id_a=r.a_id AND a.login=?" />
		</security:authentication-provider>
		<security:authentication-provider>
			<security:jdbc-user-service
				data-source-ref="datasourceBean"
				users-by-username-query="SELECT login, mdp, active FROM clients WHERE login=?"
				authorities-by-username-query="SELECT cl.login, r.name FROM clients cl, roles r WHERE cl.id_cl=r.cl_id AND cl.login=?" />
		</security:authentication-provider>
	</security:authentication-manager>

</beans>
